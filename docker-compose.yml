version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      - LOG_LEVEL=info
    depends_on:
      - auth-service
      - payment-service
      - wallet-service
      - exchange-service
      - notification-service
      - subscription-service
    volumes:
      - ./api-gateway/config:/etc/gateway/conf.d
      - ./api-gateway/certs:/etc/ssl/certs
    networks:
      - crypto_payment_network

  # Core microservices
  payment-service:
    build: ./services/payment-service
    restart: always
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - LOG_LEVEL=info
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - crypto_payment_network
    volumes:
      - ./logs/payment-service:/app/logs

  auth-service:
    build: ./services/auth-service
    restart: always
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - VAULT_ADDR=http://vault:8200
      - LOG_LEVEL=info
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - vault
    networks:
      - crypto_payment_network
    volumes:
      - ./logs/auth-service:/app/logs

  wallet-service:
    build: ./services/wallet-service
    restart: always
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - LOG_LEVEL=info
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - crypto_payment_network
    volumes:
      - ./logs/wallet-service:/app/logs

  exchange-service:
    build: ./services/exchange-service
    restart: always
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - LOG_LEVEL=info
    env_file:
      - .env
    depends_on:
      - redis
      - rabbitmq
    networks:
      - crypto_payment_network
    volumes:
      - ./logs/exchange-service:/app/logs

  notification-service:
    build: ./services/notification-service
    restart: always
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - LOG_LEVEL=info
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - crypto_payment_network
    volumes:
      - ./logs/notification-service:/app/logs

  subscription-service:
    build: ./services/subscription-service
    restart: always
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - LOG_LEVEL=info
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - crypto_payment_network
    volumes:
      - ./logs/subscription-service:/app/logs

  # Infrastructure services
  postgres:
    image: postgres:14-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER:-crypto_payment}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
      - POSTGRES_DB=${DB_NAME:-crypto_payment_db}
    ports:
      - "5432:5432"
    networks:
      - crypto_payment_network

  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - crypto_payment_network

  # Message broker
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-crypto_payment}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-rabbitmq_secure_password}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - crypto_payment_network

  # Secret management
  vault:
    image: vault:latest
    restart: always
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN:-vault_root_token}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
    networks:
      - crypto_payment_network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - crypto_payment_network

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - crypto_payment_network
    depends_on:
      - prometheus

  # Logging with ELK stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - crypto_payment_network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    restart: always
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/logs
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - crypto_payment_network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - crypto_payment_network
    depends_on:
      - elasticsearch

  # Admin panels
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - crypto_payment_network

  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-redis_secure_password}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - crypto_payment_network

  # Frontend applications
  admin-frontend:
    build: ./frontend/admin
    restart: always
    ports:
      - "8082:80"
    networks:
      - crypto_payment_network
    depends_on:
      - api-gateway

  merchant-frontend:
    build: ./frontend/merchant
    restart: always
    ports:
      - "8083:80"
    networks:
      - crypto_payment_network
    depends_on:
      - api-gateway

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  vault_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  crypto_payment_network:
    driver: bridge 